spring:
  application:
    name: demo-producer-application
  # Kafka 配置项
  kafka:
    bootstrap-servers: 127.0.0.1:9092
  cloud:
    # Spring Cloud Stream 配置项，对应 BindingServiceProperties 类
    stream:
      # Binder 配置项，对应 BinderProperties Map
#      binders:
#        kafka001:
#          # 设置 Binder 的类型
#          type: kafka
#          # 设置 Binder 的环境配置
#          environment:
      # Binding 配置项，对应 BindingProperties Map
      bindings:
        demo-01-output:
          # 目的地。这里使用 Kafka Topic
          destination: DEMO-TOPIC-01
          # 内容格式。这里使用 JSON
          content-type: application/json
        demo-02-output:
          destination: DEMO-TOPIC-02
          content-type: application/json
        demo-03-output:
          destination: DEMO-TOPIC-03
          content-type: application/json
        demo-04-output:
          destination: DEMO-TOPIC-04
          content-type: application/json
        demo-05-output:
          destination: DEMO-TOPIC-05
          content-type: application/json
          # Producer 配置项，对应 ProducerProperties 类
          producer:
            # 分区 key 表达式。该表达式基于 Spring EL，从消息中获得分区 key。
            # headers['partitionKey']
            partition-key-expression: payload['id']
        demo-06-output:
          destination: DEMO-TOPIC-06
          content-type: application/json
        demo-07-output:
          destination: DEMO-TOPIC-07
          content-type: application/json
        demo-08-output:
          destination: DEMO-TOPIC-08
          content-type: application/json
        demo-10-output:
          destination: DEMO-TOPIC-10
          content-type: application/json
      # Spring Cloud Stream Kafka 配置项
      kafka:
        # Kafka Binder 配置项，对应 KafkaBinderConfigurationProperties 类
        binder:
          # 指定 Kafka Broker 地址，可以设置多个，以逗号分隔
          brokers: ${spring.kafka.bootstrap-servers}
        # Kafka 自定义 Binding 配置项，对应 KafkaBindingProperties Map
        bindings:
          demo-01-output:
            # Kafka Producer 配置项，对应 KafkaProducerProperties 类
            producer:
              # 是否同步发送消息，默认为 false 异步。
              sync: true
          demo-05-output:
            producer:
              sync: true
          demo-07-output:
            producer:
              sync: true
          demo-10-output:
            producer:
              # 批处理延迟时间上限。
              # 这里配置为 30 * 1000 ms 过后，不管是否消息数量是否到达 batch-size 或者消息大小到达 buffer-memory 后，都直接发送一次请求
              batch-timeout: 30000
              # 每次批量发送消息的最大内存
              buffer-size: 33554432
#
server:
  port: 18080
logging:
  level:
    org.springframework.kafka.transaction: debug
#
management:
  endpoints:
    web:
      exposure:
        include: '*' # 需要开放的端点。默认值只打开 health 和 info 两个端点。通过设置 * ，可以开放所有端点。
  endpoint:
    # Health 端点配置项，对应 HealthProperties 配置类
    health:
      enabled: true # 是否开启。默认为 true 开启。
      show-details: ALWAYS # 何时显示完整的健康信息。默认为 NEVER 都不展示。可选 WHEN_AUTHORIZED 当经过授权的用户；可选 ALWAYS 总是展示。
#