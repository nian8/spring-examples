spring:
  application:
    name: rabbit-demo-consumer
  # Kafka 配置项
  kafka:
    bootstrap-servers: 127.0.0.1:9092
  cloud:
    # Spring Cloud Stream 配置项，对应 BindingServiceProperties 类
    stream:
      # Binder 配置项，对应 BinderProperties Map
#      binders:
#        kafka001:
#          # 设置 Binder 的类型
#          type: kafka
#          # 设置 Binder 的环境配置
#          environment:
#            # 如果是 RabbitMQ 类型的时候，则对应的是 RabbitProperties 类
#            spring:
#              kafka:
#                bootstrap-servers: ${spring.kafka.bootstrap-servers}
      # Binding 配置项，对应 BindingProperties Map
      bindings:
        demo-01-input:
          # 目的地。这里使用 Kafka Topic
          destination: DEMO-TOPIC-01
          # 内容格式。这里使用 JSON
          content-type: application/json
          # 消费者分组
          group: demo-consumer-group-DEMO-TOPIC-01
          # Consumer 配置项，对应 ConsumerProperties 类
          consumer:
            # 每个 Consumer 消费线程数的初始大小，默认为 1
            concurrency: 2
        demo-02-input:
          destination: DEMO-TOPIC-02
          content-type: application/json
          group: demo-consumer-group-DEMO-TOPIC-02
        demo-03-input:
          destination: DEMO-TOPIC-03
          content-type: application/json
          group: demo-consumer-group-DEMO-TOPIC-03
          # Consumer 配置项，对应 ConsumerProperties 类
          consumer:
            # 重试次数，默认为 3 次。
            max-attempts: 3
            # 重试间隔的初始值，单位毫秒，默认为 1000
            back-off-initial-interval: 3000
            # 重试间隔的递乘系数，默认为 2.0
            back-off-multiplier: 2.0
            # 重试间隔的最大值，单位毫秒，默认为 10000
            back-off-max-interval: 10000
        demo-04-input:
          destination: DEMO-TOPIC-04
          content-type: application/json
          # 消费分组为空时，该 Consumer 生成一个独有且自动删除的 Queue，从而实现广播消费的功能。
#          group: demo-consumer-group-DEMO-TOPIC-04
        demo-05-input:
          destination: DEMO-TOPIC-05
          content-type: application/json
          group: demo-consumer-group-DEMO-TOPIC-05
          consumer:
            concurrency: 2
        demo-06-input:
          destination: DEMO-TOPIC-06
          content-type: application/json
          group: demo-consumer-group-DEMO-TOPIC-06
        demo-07-input:
          destination: DEMO-TOPIC-07
          content-type: application/json
          group: demo-consumer-group-DEMO-TOPIC-07
        demo-08-input:
          destination: DEMO-TOPIC-08
          group: demo-consumer-group-DEMO-TOPIC-08
        demo-10-input:
          destination: DEMO-TOPIC-10
          content-type: application/json
          group: demo-consumer-group-DEMO-TOPIC-10
          consumer:
            # 是否批量消费默认，默认为 false
            batch-mode: true
      # Spring Cloud Stream Kafka 配置项
      kafka:
        # Kafka Binder 配置项，对应 KafkaBinderConfigurationProperties 类
        binder:
          # 指定 Kafka Broker 地址，可以设置多个，以逗号分隔
          brokers: ${spring.kafka.bootstrap-servers}
          configuration:
            # poll 一次拉取的阻塞的最大时长，单位：毫秒。这里指的是阻塞拉取需要满足至少 fetch-min-size 大小的消息
            fetch.max.wait.ms: 10000
            # poll 一次消息拉取的最小数据量，单位：字节
            fetch.min.bytes: 1024
            # poll 一次消息拉取的最大数量
            max.poll.records: 100
        # Kafka Binding 配置项，对应 KafkaBindingProperties 类
        bindings:
          demo-03-input:
            # Kafka Consumer 配置项，对应 KafkaConsumerProperties 类
            consumer:
              # 是否开启死信队列，默认为 false 关闭
              enable-dlq: true
              # 死信队列名，默认为 `errors.{topicName}.{consumerGroup}`
              dlq-name:
#          demo-07-input:
#            # Kafka Consumer 配置项，对应 KafkaConsumerProperties 类
#            consumer:
#              configuration:
#                isolation:
#                  # !!! 读取已提交的消息
#                  level: read_committed
          demo-08-input:
            # Kafka Consumer 配置项，对应 KafkaConsumerProperties 类
            consumer:
              # 是否自动提交消费进度，默认为 true 自动提交。
              # auto-commit-offset: false
              # 是否每一条消息都进行提交消费进度，默认为 false 在每一批消费完成后一起提交。
              # ack-each-record: true
              ack-mode: MANUAL_IMMEDIATE
#
server:
  port: ${random.int[10000,19999]} # 随机端口，方便启动多个消费者
#
management:
  endpoints:
    web:
      exposure:
        include: '*' # 需要开放的端点。默认值只打开 health 和 info 两个端点。通过设置 * ，可以开放所有端点。
  endpoint:
    # Health 端点配置项，对应 HealthProperties 配置类
    health:
      enabled: true # 是否开启。默认为 true 开启。
      show-details: ALWAYS # 何时显示完整的健康信息。默认为 NEVER 都不展示。可选 WHEN_AUTHORIZED 当经过授权的用户；可选 ALWAYS 总是展示。
#