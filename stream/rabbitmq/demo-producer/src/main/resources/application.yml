spring:
  application:
    name: demo-producer-application
  # RabbitMQ 配置项，则对应的是 RabbitProperties 类
  rabbitmq:
    # RabbitMQ 服务的地址
    host: 127.0.0.1
    # RabbitMQ 服务的端口
    port: 5672
    # RabbitMQ 服务的账号
    username: user
    # RabbitMQ 服务的密码
    password: bitnami
  cloud:
    # Spring Cloud Stream 配置项，对应 BindingServiceProperties 类
    stream:
      # Binder 配置项，对应 BinderProperties Map
      binders:
        rabbit001:
          # 设置 Binder 的类型
          type: rabbit
          # 设置 Binder 的环境配置
          environment:
            # 如果是 RabbitMQ 类型的时候，则对应的是 RabbitProperties 类
            spring:
              rabbitmq:
                host: ${spring.rabbitmq.host}
                port: ${spring.rabbitmq.port}
                username: ${spring.rabbitmq.username}
                password: ${spring.rabbitmq.password}
        rabbit002:
          # 设置 Binder 的类型
          type: rabbit
          # 设置 Binder 的环境配置
          environment:
            # 如果是 RabbitMQ 类型的时候，则对应的是 RabbitProperties 类
            spring:
              rabbitmq:
                host: ${spring.rabbitmq.host}
                port: ${spring.rabbitmq.port}
                username: ${spring.rabbitmq.username}
                password: ${spring.rabbitmq.password}
                # 设置消息是否回退，默认为 false
                publisher-returns: true
                # 设置开启消息确认模型，默认为 null 不进行确认
                publisher-confirm-type: simple
      # Binding 配置项，对应 BindingProperties Map
      bindings:
        demo-01-output:
          # 目的地。这里使用 RabbitMQ Exchange
          destination: DEMO-TOPIC-01
          # 内容格式。这里使用 JSON
          content-type: application/json
          # 设置使用的 Binder 名字
          binder: rabbit001
        demo-02-output:
          destination: DEMO-TOPIC-02
          content-type: application/json
          binder: rabbit001
        demo-03-output:
          destination: DEMO-TOPIC-03
          content-type: application/json
          binder: rabbit001
        demo-04-output:
          destination: DEMO-TOPIC-04
          content-type: application/json
          binder: rabbit001
        demo-05-output:
          destination: DEMO-TOPIC-05
          content-type: application/json
          binder: rabbit001
          # Producer 配置项，对应 ProducerProperties 类
          producer:
            # 分区 key 表达式。该表达式基于 Spring EL，从消息中获得分区 key。
            # headers['partitionKey']
            partition-key-expression: payload['id']
            # 分区大小，默认为 1 分区
            partition-count: 2
            # 发送到的消费者分组，默认为空
#            required-groups: demo-consumer-group-DEMO-TOPIC-05
        demo-06-output:
          destination: DEMO-TOPIC-06
          content-type: application/json
          binder: rabbit001
        demo-07-output:
          destination: DEMO-TOPIC-07
          content-type: application/json
          binder: rabbit001
        demo-08-output:
          destination: DEMO-TOPIC-08
          content-type: application/json
          binder: rabbit001
        demo-09-output:
          destination: DEMO-TOPIC-09
          content-type: application/json
          binder: rabbit002
          producer:
            # 是否开启异常 Channel，默认为 false 关闭
            error-channel-enabled: true
        demo-10-output:
          destination: DEMO-TOPIC-10
          content-type: application/json
          binder: rabbit001
      # RabbitMQ 自定义 Binding 配置项，对应 RabbitBindingProperties Map
      rabbit:
        bindings:
          demo-02-output:
            # RabbitMQ Producer 配置项，对应 RabbitProducerProperties 类
            producer:
              # 是否使用 x-delayed-message 类型的 Exchange，即延迟消息，默认为 false
              delayed-exchange: true
          demo-07-output:
            producer:
              # 是否开启事务功能，默认为 false
              transacted: true
          demo-09-output:
            producer:
              # 设置发送确认的 Channel，默认为 null
              confirm-ack-channel: demo-09-producer-confirm
          demo-10-output:
            producer:
              # 是否开启批量发送功能，默认为 false
              batching-enabled: true
              # 超过收集的消息数量的最大条数，默认为 100
              batch-size: 5
              # 每次批量发送消息的最大内存，默认为 10000
              batch-buffer-limit: 10000
              # 超过收集的时间的最大等待时长，单位：毫秒，默认为 5000
              ### 超时开始计时的时间，是以最后一次发送时间为起点
              batch-timeout: 3000
#
server:
  port: 18080
